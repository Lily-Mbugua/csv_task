// This package contains data structures and methods that
// represent the SingularityBuilds CSV file that is generated by the Sylabs Cloud Remote Builder Service
// there is additionally utility functions to parse, process and gain insight from the CSV data
package sylabs

import (
	"bufio"
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"os"
)

// Load given a SingularityBuilds CSV file, will convert into SingularityBuilds Type
// Handles validation, errors relating to file opening and decoding CSV
// returns a filled in slice of SingularityBuild as SingularityBuild
func Load(SingularityBuildsFile string) SingularityBuilds {
	// opening the file for reading
	csvFile, err := os.Open(SingularityBuildsFile)
	if err != nil { //If there is any error opening the file error out
		fmt.Printf("Couldn't open file %q please check permissions or confirm it exist", SingularityBuildsFile)
		panic(err)
	}
	// getting our reader setup, so it's easier to work with CSV lines
	reader := csv.NewReader(bufio.NewReader(csvFile))

	// create the variable to store our returned data - This essentially says builds
	//is a collection of SingularityBuild(the "book") -all the lines in the file
	var builds []SingularityBuild

	for {
		// iterate until we get to end of document or run into a
		// error we can't recover from, or reach end of file
		line, error := reader.Read()
		// if it's end of file (EOF-End of file), we are breaking out loop,
		if error == io.EOF {
			break
		} else if error != nil {
			log.Fatal(error)
		}

		// Validate all values before appending them to builds
		/*
			line 1 index 0 =  Unique identifier for each build
			line 2 index 1 = User ID references the user that submitted the build request
			line 3 index 2 = Time the build request was received (RFC 3339 formate string)
			line 4 index 3 = Time the build execution began (RFC 3339 formatted string)
			line 5 index 4 = Time the build execution finished (RFC 3339 formatted string)
			line 6 index 5 = Indicator for if the build has been deleted
			line 7 index 6 =  Exit code from the build process, >0 indicates failure
			line 8 index 7 =  Six of resulting built image file
			sample row from CSV contains 8 values, that we parse below:
			"5c00a8f685db9ec46dbc13d9,5c00a8f685db9ec46dbc13d7,2018-10-31T01:54:32-04:00,2018-10-31T01:55:14-04:00,2018-10-31T02:47:31-04:00,false,0,945058189"
		*/

		// parse our values, note the validation functions will panic if they run into error, this is by design
		parseUUID := line[0]                         // should already be a string, copy as is
		parseID := line[1]                           // should already be a string, copy as is
		pareReqTime := parseRFC3339Time(line[2])     // convert to RFC3339 time
		parseBuildTime := parseRFC3339Time(line[3])  // convert to RFC3339 time
		parseFinishTime := parseRFC3339Time(line[4]) // convert to RFC3339 time
		parseDeleted := parseBool(line[5])           // convert to boolean
		pareExitCode := uint8(parseUInt64(line[6]))  // convert to int, then cast to int8
		pasreSize := parseUInt64(line[7])            // convert to int

		// build the SingularityBuild struct, fill it in. Then append it to builds
		builds = append(builds, SingularityBuild{
			UUID:   parseUUID,
			User: User{
				UserID: parseID,
			},
			RequestReceviedTS: &pareReqTime,
			BuildBeganTS:      &parseBuildTime,
			BuildFinishedTS:   &parseFinishTime,
			Deleted:           parseDeleted,
			ExitCode:          pareExitCode,
			Size:              pasreSize,
		})

	}
	return builds
}
